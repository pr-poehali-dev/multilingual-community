import { useState } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { api } from '@/lib/api';
import { useStore } from '@/lib/store';
import { toast } from 'sonner';

interface AuthModalProps {
  open: boolean;
  onClose: () => void;
}

const AuthModal = ({ open, onClose }: AuthModalProps) => {
  const [isLogin, setIsLogin] = useState(true);
  const [loading, setLoading] = useState(false);
  const setCurrentUser = useStore(state => state.setCurrentUser);
  
  const [formData, setFormData] = useState({
    email: '',
    name: '',
    avatar: 'üöÄ',
    nativeLanguage: '–†—É—Å—Å–∫–∏–π',
    learningLanguage: 'English',
    country: 'RU'
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      if (isLogin) {
        const user = await api.login(formData.email);
        setCurrentUser(user);
        toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
        onClose();
      } else {
        const user = await api.register(formData);
        setCurrentUser(user);
        toast.success('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        onClose();
      }
    } catch (error: any) {
      toast.error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    } finally {
      setLoading(false);
    }
  };

  const avatars = ['üöÄ', 'üë®', 'üë©', 'üßë', 'üë§', 'üòä', 'üéÆ', 'üé®', 'üé≠', 'üé™'];

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="text-2xl">{isLogin ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</DialogTitle>
          <DialogDescription>
            {isLogin ? '–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'}
          </DialogDescription>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              placeholder="your@email.com"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              required
            />
          </div>

          {!isLogin && (
            <>
              <div>
                <Label htmlFor="name">–ò–º—è</Label>
                <Input
                  id="name"
                  type="text"
                  placeholder="–í–∞—à–µ –∏–º—è"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  required
                />
              </div>

              <div>
                <Label htmlFor="avatar">–ê–≤–∞—Ç–∞—Ä</Label>
                <div className="grid grid-cols-5 gap-2 mt-2">
                  {avatars.map(av => (
                    <button
                      key={av}
                      type="button"
                      className={`text-3xl p-2 rounded-lg border-2 transition-all hover:scale-110 ${
                        formData.avatar === av ? 'border-primary bg-primary/10' : 'border-muted'
                      }`}
                      onClick={() => setFormData({ ...formData, avatar: av })}
                    >
                      {av}
                    </button>
                  ))}
                </div>
              </div>

              <div>
                <Label htmlFor="nativeLanguage">–†–æ–¥–Ω–æ–π —è–∑—ã–∫</Label>
                <Select 
                  value={formData.nativeLanguage} 
                  onValueChange={(value) => setFormData({ ...formData, nativeLanguage: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="–†—É—Å—Å–∫–∏–π">–†—É—Å—Å–∫–∏–π</SelectItem>
                    <SelectItem value="English">English</SelectItem>
                    <SelectItem value="Espa√±ol">Espa√±ol</SelectItem>
                    <SelectItem value="‰∏≠Êñá">‰∏≠Êñá</SelectItem>
                    <SelectItem value="Êó•Êú¨Ë™û">Êó•Êú¨Ë™û</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="learningLanguage">–ò–∑—É—á–∞—é</Label>
                <Select 
                  value={formData.learningLanguage} 
                  onValueChange={(value) => setFormData({ ...formData, learningLanguage: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="English">English</SelectItem>
                    <SelectItem value="–†—É—Å—Å–∫–∏–π">–†—É—Å—Å–∫–∏–π</SelectItem>
                    <SelectItem value="Espa√±ol">Espa√±ol</SelectItem>
                    <SelectItem value="‰∏≠Êñá">‰∏≠Êñá</SelectItem>
                    <SelectItem value="Êó•Êú¨Ë™û">Êó•Êú¨Ë™û</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="country">–°—Ç—Ä–∞–Ω–∞</Label>
                <Select 
                  value={formData.country} 
                  onValueChange={(value) => setFormData({ ...formData, country: value })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="RU">üá∑üá∫ –†–æ—Å—Å–∏—è</SelectItem>
                    <SelectItem value="US">üá∫üá∏ –°–®–ê</SelectItem>
                    <SelectItem value="GB">üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è</SelectItem>
                    <SelectItem value="ES">üá™üá∏ –ò—Å–ø–∞–Ω–∏—è</SelectItem>
                    <SelectItem value="CN">üá®üá≥ –ö–∏—Ç–∞–π</SelectItem>
                    <SelectItem value="JP">üáØüáµ –Ø–ø–æ–Ω–∏—è</SelectItem>
                    <SelectItem value="BR">üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </>
          )}

          <Button type="submit" className="w-full" disabled={loading}>
            {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </Button>

          <p className="text-center text-sm text-muted-foreground">
            {isLogin ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'}{' '}
            <button
              type="button"
              className="text-primary hover:underline"
              onClick={() => setIsLogin(!isLogin)}
            >
              {isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'}
            </button>
          </p>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default AuthModal;